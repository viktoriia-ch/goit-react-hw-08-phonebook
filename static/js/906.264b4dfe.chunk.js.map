{"version":3,"file":"static/js/906.264b4dfe.chunk.js","mappings":"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","sources":["modules/ContactForm/fields.js","webpack://react-homework-template/./src/modules/ContactForm/contact-form.module.css?d899","modules/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://react-homework-template/./src/modules/Filter/filter.module.scss?f50b","modules/Filter/Filter.jsx","webpack://react-homework-template/./src/modules/ContactList/contact-list.module.scss?81aa","modules/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/shared/components/Button/button.module.scss?9580","shared/components/Button/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://react-homework-template/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/shared/components/Title/title.module.css?e9d1","shared/components/Title/Title.jsx"],"sourcesContent":["const fields = {\n  name: {\n    label: 'Name',\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    type: 'text',\n    name: 'name',\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    required: true,\n    placeholder: 'enter name...',\n  },\n  number: {\n    label: 'Number',\n    title:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n    type: 'tel',\n    name: 'number',\n    pattern: '+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}',\n    required: true,\n    placeholder: 'enter number...',\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contact-form_form__KERgr\"};","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\n\nimport Title from 'shared/components/Title/Title';\nimport TextField from 'shared/components/TextField/TextField';\nimport Button from 'shared/components/Button/Button';\n\nimport {\n  fetchContacts,\n  addContact,\n} from '../../redux/contacts/contacts-operations';\nimport fields from './fields';\n\nimport styles from './contact-form.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleAddContact = ({ name, number }) => {\n    const result = dispatch(addContact({ name, number }));\n    Notify.success('Contact added!');\n    return result;\n  };\n\n  const handleChangeName = ({ target: { value } }) => {\n    setName(value);\n  };\n\n  const handleChangeNumber = ({ target: { value } }) => {\n    setNumber(value);\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    handleAddContact({ name, number }).then(\n      response =>\n        response.type === 'contacts/addContact/fulfilled' && resetForm()\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <Title text=\"Phonebook\" />\n      <TextField onChange={handleChangeName} value={name} {...fields.name} />\n      <TextField\n        onChange={handleChangeNumber}\n        value={number}\n        {...fields.number}\n      />\n      <Button type=\"submit\" text=\"Add contact\" />\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"filter_title__+Z6XL\",\"input\":\"filter_input__akMgQ\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { getFilter } from '../../redux/filter/filter-selectors';\n\nimport styles from './filter.module.scss';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      <h2 className={styles.title}>Contacts</h2>\n      <label>\n        Find contacts by name:\n        <input\n          onChange={handleFilter}\n          name=\"filter\"\n          placeholder=\"filter contacts...\"\n          value={filter}\n          className={styles.input}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contact-list_list__inua9\",\"item\":\"contact-list_item__daVQ0\",\"btn\":\"contact-list_btn__gWG8c\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\n\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\n\nimport styles from './contact-list.module.scss';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const contactList = filteredContacts.map(contact => {\n    const handleRemoveContact = id => {\n      dispatch(deleteContact(id));\n      Notify.success('Contact deleted!');\n    };\n\n    return (\n      <li key={contact.id} className={styles.item}>\n        <span>\n          {contact.name}: {contact.number}\n        </span>\n\n        <button\n          className={styles.btn}\n          onClick={() => handleRemoveContact(contact.id)}\n          type=\"button\"\n        >\n          delete\n        </button>\n      </li>\n    );\n  });\n\n  return <ul className={styles.list}>{contactList}</ul>;\n};\n\nexport default ContactList;\n","import ContactForm from 'modules/ContactForm/ContactForm';\nimport Filter from 'modules/Filter/Filter';\nimport ContactList from 'modules/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <div>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","export const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items || [];\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.items.filter(\n    ({ name, number }) =>\n      name.toLowerCase().includes(normalizedFilter) ||\n      number.toLowerCase().includes(normalizedFilter)\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__uXPTj\"};","import styles from './button.module.scss';\n\nconst Button = ({ text, type }) => {\n  return (\n    <button type={type} className={styles.btn}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"text-field_input__YM8fs\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport styles from './text-field.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div>\n      <label className={styles.label} htmlFor={id}>\n        {label}\n      </label>\n      <input\n        className={styles.input}\n        id={id}\n        onChange={handleChange}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"title_title__T6+0F\"};","import styles from './title.module.css';\n\nconst Title = ({ text }) => {\n  return <h1 className={styles.title}>{text}</h1>;\n};\n\nexport default Title;\n"],"names":["name","label","title","type","pattern","required","placeholder","number","useState","setName","setNumber","dispatch","useDispatch","useEffect","fetchContacts","onSubmit","event","preventDefault","result","addContact","Notify","handleAddContact","then","response","className","styles","Title","text","TextField","onChange","value","target","fields","Button","getFilter","filter","useSelector","setFilter","filteredContacts","getFilteredContacts","contactList","map","contact","onClick","id","deleteContact","contacts","items","normalizedFilter","toLowerCase","includes","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","handleChange","props","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor"],"sourceRoot":""}